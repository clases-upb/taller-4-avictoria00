/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;



public class App {
    

    public static void main(String[] args) {

        final byte minimo = 20, máximo= 30;
        double cantidad = Math.random() * (máximo - minimo) + minimo;
       
       for (int i = 0; i < cantidad; i++) {      
        Raiz_numeros ();
       }
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main


    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */
public static String Escribir_asc(int nro_1, int nro_2, int nro_3){
    try {

       String mensaje = "";
       if(nro_1 == nro_2 || nro_1 == nro_3 || nro_2 == nro_3 ){
          return "Error: La función no considera números iguales";
       }

       else if(nro_1 > nro_2 && nro_2 > nro_3){
          mensaje = nro_1 + " - " + nro_2 + " - " + nro_3;
          return mensaje;
       }

       else if(nro_1 > nro_3 && nro_3 > nro_2){
          mensaje = nro_1 + " - " + nro_3 + " - " + nro_2;
          return mensaje;
       }

       else if(nro_2 > nro_1 && nro_1 > nro_3){
          mensaje = nro_2 + " - " + nro_1 + " - " + nro_3;
          return mensaje;
       }

       else if(nro_2 > nro_3 && nro_3 > nro_1){
          mensaje = nro_2 + " - " + nro_3 + " - " + nro_1;
          return mensaje;
       }

       else if(nro_3 > nro_2 && nro_2 > nro_1){
          mensaje = nro_3 + " - " + nro_2 + " - " + nro_1;
          return mensaje;
       }

       else if(nro_3 > nro_1 && nro_1 > nro_2){
          mensaje = nro_3 + " - " + nro_1 + " - " + nro_2;
          return mensaje;
       }

       else{
          return "Ocurrió un error inesperado";
       }

    } 
    
    catch (Exception e) {
       return "Ocurrió un error inesperado";
    }
 }

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */
public static byte Obtener_cifras (int nro_){
   
    try {

         byte cifras = 0;
          if (nro_ < 0 || nro_ > 50000){
            return 0;
         }
              if (nro_ < 10) {
            cifras = 1;
         }
              else if (nro_ < 100){
            cifras = 2;
         } 
              else if (nro_ < 1000){
            cifras = 3;
         } 
              else if (nro_ < 10000){
            cifras = 4;
         } 
              else if (nro_ < 100000){
            cifras = 5;
         }
    } 
    catch (Exception e) {
        return -1;
    }
 }
    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */
public static float Raiz_numeros (){

    try {
        
        final int numero_minimo = 2, numero_maximo = 355, aleatorio_1 = 20,
        aleatorio_2= 30;
        
        int n = (int) (Math.random() * (numero_maximo - numero_minimo) + numero_minimo);
            double raiz = Math.sqrt(n);

            System.out.println(String.format("Numero: %s Raiz: %.2f", n, raiz));

    } catch (Exception e) {
        return -1;
    }
   }

    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */
public static int numeros_aleatorios(int maxi_, int mini_){
        
    try {
        
        final int lim_nro = 900, divisor = 2;
    
        int numero = 0, pares = 0, rango = 0;
        
        if(maxi_ > mini_){
            
            for (int i = 1; i <= lim_nro; i ++){
                
                numero = (int)(Math.random()*(maxi_ - mini_) + mini_);
                rango = numero % divisor;
                
                System.out.print(numero + " ");
                
                if(rango == 0)
                    pares ++;
            }
            
            System.out.println("el total de números pares fue: " + pares );
        }
        
        else{
            System.out.println("error, números inválidos");
            return 0;
        }
        
        return pares;
    } 
    catch(Exception e) {
        System.out.println("ha ocurrido un error inesperado");
        return -1;
    }
  }


    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.
    */
public static int Suma_aleatorios (int cantidad){

    try {
        final int max_ = 100, min_ = 0;
            int rango = 0, suma = 0;
            
            for (int i = 1; i <= cantidad; i++){
                rango = (int)(Math.random()*(max_-min_))+ min_;
                suma += rango;
            }
            return suma;
    } catch (Exception e) {
        return -1;
    }
  }

    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */

    

}
